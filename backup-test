#!/bin/bash

#set -x

scriptdir=`dirname $0`
cd $scriptdir
export PATH="`pwd`/util:/Developer/Tools:$PATH:."

export printWidth=20

usage () {
    echo "Usage: 
    General form:
    $0 <verb> [-d] [-t test]* [-c copier]* args
    
    Flags:
        -d           Show results of sub-tests individually instead of just
                     showing the result of the overall test.
        
        -t <test>    Use the given test instead of the whole test suite.  May
                     be specified multiple times.  Example:
                     $0 copy -t 95-devices /Volumes/Src /Volumes/Dst
                    
        -c <copier>  Use the given copier instead of the whole copier suite.
                     May be specified multiple times.  Example:
                     $0 copy -c 10-rsync-apple /Volumes/Src /Volumes/Dst
    
    Meanings of different verbs:
        $0 create-vol volname
                Create and mount a disk image suitable for testing.

        $0 create [-t test]* dir
                Populate dir with test files/directories.

        $0 verify [-d] [-t test]* [-c copier]* srcdir dstdir
                Test the validity of the files in dstdir, which should be
                copies of those in srcdir.  srcdir should contain a directory
                created by '$0 create srcdir'.

        $0 copy [-d] [-t test]* [-c copier]* srcdir dstdir
                For each copier, copy from srcdir to dstdir/copier-name,
                then verify each copy.  Note that -t only affects the *verify*
                step, not the copy step.

        $0 compare [-t test]* srcfile dstfile
                Test the two files for equality based on all tests in the
                test suite (or the tests given with -t).

        $0 clean [-t test]* dir
                Remove all test files from dir.  For various reasons, 
                simply running 'rm -rf dir' will not work.

    Note that many operations require elevated privileges, so you may be
    prompted for your password.

    The typical usage will be something like:
    1. Create files
        $0 create-vol Src
        $0 create-vol Dst
        $0 create /Volumes/Src

    2. Run test suite (as root!)
        $0 copy -d /Volumes/Src /Volumes/Dst
        # That filled /Volumes/Dst with a subdirectory for each copier.
        # To verify the results from a single copy again:
        $0 verify -d /Volumes/Src /Volumes/Dst/10-rsync-apple

    3. Or maybe you want to test a GUI copier
        $0 create-vol SDDst
        # Use SuperDuper! to copy from /Volumes/Src to /Volumes/SDDst, then:
        $0 verify -d /Volumes/Src /Volumes/SDDst
    "
    exit 1
}

read-tests () {
    local testfiles=`ls tests.d/*.test`
    local tests=''
    for f in $testfiles; do
        local tst=`basename -s .test $f`
        tests="$tests $tst"
    done
    echo $tests
}

read-copiers () {
    local copyfiles=`ls copiers.d/*.cp`
    local copiers=''
    for f in $copyfiles; do
        local cpf=`basename -s .cp $f`
        copiers="$copiers $cpf"
    done
    echo $copiers
}

create-vol () {
    hdiutil create -size 40m -fs 'Journaled HFS+' \
            -volname $1 -type SPARSE ./$1
    hdiutil attach -owners on ./$1.sparseimage
    sudo fsaclctl -p /Volumes/$1 -e
    touch /Volumes/$1/backup-test-vol
}

check-vol () {
    if [ -e $1/backup-test-vol ]; then
        return 0
    else
        echo "$1 is not a backup-test volume!  Aborting." 1>&2
        exit 1
    fi
}

clean () {
    [ ! -d "$1" ] && return 0
    check-vol $1
    for t in $tests; do
        tnice=$t
        printf "Cleaning: %${printWidth}s\n" "$tnice"
        if [ -d "$1/$t" ]; then
            bash util/test-runner tests.d/$t.test clean $1/$t || true
            sudo rm -Rf "$1/$t" || true
        fi
    done
}

create () {
    check-vol $1
    clean $1
    for t in $tests; do
        tnice=$t
        printf "Creating: %${printWidth}s ... " "$tnice"
        mkdir $1/$t
        bash util/test-runner tests.d/$t.test create $1/$t \
            && echo ok \
            || echo FAIL
    done
}

verify () {
    local src="$1"
    local dst="$2"
    if [ ! -d "$2" ]; then
        echo "Copier dir '$2' does not exist"
        return 1
    fi
    local code=`cat $dst/exit-code | awk '{print $1}'`
    if [ ! "$code" = "0" ]; then
        echo "This copier exited with error code $code"
    fi
    if [ ! "`wc -c $dst/log | awk '{print $1}'`" = "0" ]; then
        echo "This copier produced log output in:"
        echo "   $dst/log"
    fi
    for t in $tests; do
        local tnice=${t:3}
        if [ ! -d "$dst/$t" ]; then
            echo "Test dir '$dst/$t' does not exist"
            continue
        fi
        printf "Verifying: %${printWidth}s ... " "$tnice"
        bash util/test-runner tests.d/$t.test verify $dst/$t $src/$t \
            && echo ok \
            || echo FAIL
    done
}

# Compare a single pair of files for all known properties.
compare () {
    for t in $tests; do
        tnice=${t:3}
        printf "Comparing: %${printWidth}s ... " "$tnice"
        bash util/test-runner tests.d/$t.test compare $1 $2 \
            && echo ok \
            || echo FAIL
    done
}

copy () {
    check-vol $1
    check-vol $2
    
    # Make sure there's no trailing /
    local src="`dirname $1`/`basename $1`"
    local dst="`dirname $2`/`basename $2`"
    echo "src = $src"
    echo "dst = $dst"
    # This requires the actual mount point.
    local srcDisk=`stat -f "%Sd" $src`
    local dstDisk=`stat -f "%Sd" $dst`
    echo Enabling owners on src/dst disks
    sudo mount -uvo perm /dev/$srcDisk
    sudo mount -uvo perm /dev/$dstDisk
    echo -n Cleaning
    # Always clean all tests -- we want to start fresh on a copy.
    oldtests="$tests"
    tests=`read-tests`
    for c in $copiers; do
        echo -n .
        clean $dst/$c > /dev/null
        sudo rm -Rf $dst/$c
    done
    tests="$oldtests"
    echo
    for c in $copiers; do
        cnice=${c:3}
        printf "Copying with: %${printWidth}s ... " "$cnice"
        mkdir $dst/$c
        bash util/copy-runner copiers.d/$c.cp $src $dst/$c
        code=$?
        echo $code > $dst/$c/exit-code
        [ "$code" = "0" ] && echo ok \
            || echo FAIL
    done
    for c2 in $copiers; do
        cnice=${c2:3}
        echo
        echo "------------------ $cnice ------------------"
        if [ -e $dst/$c2/skipped ]; then
            echo "    This copier was skipped"
        else
            verify $src $dst/$c2
        fi
    done
}

# Parse arguments
[ "$#" -lt "2" ] && usage
verb=$1
shift
# Check for flags
tests=''
copiers=''
while [ "${1:0:1}" = "-" ]; do
    opt=$1
    shift
    echo cmd = $0 $@
    case $opt in
        -d) export DETAIL=1;;
        -t)
            tests="$tests $1"
            echo "tests = $tests"
            shift
            ;;
        -c)
            copiers="$copiers $1"
            shift 1
            ;;
        *)
            echo "Unkown flag: $opt"
            exit 1
    esac
done
[ -z "$tests" ] && tests="`read-tests`"
[ -z "$copiers" ] && copiers="`read-copiers`"

case $verb in
    create|create-vol|clean)
        $verb $1
    ;;
    verify|copy|compare)
        [ "$#" -lt "2" ] && usage
        $verb $1 $2
    ;;
    *) 
        usage
    ;;
esac
